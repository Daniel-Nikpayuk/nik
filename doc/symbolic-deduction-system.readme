/************************************************************************************************************************
**
** Copyright 2015-2019 Daniel Nikpayuk, Inuit Nunangat, The Inuit Nation
**
** This file is part of nik.
**
** nik is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
** as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
**
** nik is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
** of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License along with nik. If not, see
** <http://www.gnu.org/licenses/>.
**
************************************************************************************************************************/


/*
	C++ core deduction system:


		judgement		:=	( instance           : type               )


		register_judgement	:=	( value_instance     : value_type         )

						( boolean            : bool               )
						( literal            : unsigned char      )
						( literal            : signed   char      )
						( numeric            : unsigned short     )
						( numeric            : signed   short     )
						( numeric            : unsigned int       )
						( numeric            : signed   int       )
						( numeric            : unsigned long      )
						( numeric            : signed   long      )
						( numeric            : unsigned long long )
						( numeric            : signed   long long )
						( numeric            : pointer            )


		address_judgement	:=	( object_instance    : object_type        )

						( initialization     : array              )
						( struct             : abstraction        )
						( specialization     : template           )


		symbolic_judgement	:=	( parameter_instance : parameter_type     )

						( value_instance     : value_type         )
						( value_type         : typename           )
						( abstraction        : typename           )
						( template           : typename           )


/***********************************************************************************************************************/


	Nik library symbolic lens dependency narrative:


		alias			:=	( terminal_name      : initial_name       )

						( builtin            : value_type         )


	1.  Type Theory is our Interface.
	2.  We use Category Theory to model Type Theory as it privileges compositionality.
	3.  We use Set Theory to model Category Theory as it is compatible with C++.
	4.  From this perspective, functions are the initial grammar type. Primitive functions
            are as follows:


		reflex				a) These are the identity functions for their respective types.

							reflex_A : A --> A

						b) Reflexes are divided based on their judgement types.

							echo : builtin  --> builtin
							ping : typename --> typename


	5.  From here we build set theoretic pairs, products, and projections to define our interface product type.
	6.  From here we build the function object type, which is a way to locally implement lazy evaluation. We "force"
	    the function object with the following polymorphic function:


		transit				a) These are the "force" functions classically used to implement
						   the local lazy paradigm.

							transit_{A, B} : (A --> B) x A --> B

						b) Transits are divided based on local implementation grammar.

							static constexpr:

								pose : ( builtin  --> builtin  ) x builtin  --> builtin

							using alias:

								turn : ( typename --> builtin  ) x typename --> builtin
								moiz : ( builtin  --> typename ) x builtin  --> typename
								call : ( typename --> typename ) x typename --> typename


	7.  Let A, B, C be types, with f : B --> C. The "function object form" of f with respect to A is defined to be

		f_A : (A --> B) x A --> C

		    := f . transit_{A, B}

            In practice, function composition is often written in what is otherwise an ambiguous shortform. These definitions
	    allow us to declare properly defined grammar for such compositional cases. Keep in mind, these function objects
	    themselves may be constructed under various local grammatical implementations, and in practice might not even
	    be defined strictly as a single object, which is to say keep your grammar flexible when interpreting what
	    is and isn't a function object in the implementation language.

	    These objects also suggest that grammatical forms having typed input---composed with various transits---are
	    the bare minimum requirements for compositional robustness. If a particular form is common enough it can
	    also then be optimized---when effective to do so.

	8.  From set theoretic pairs and projections we can define coprojections and our interface coproduct types.
	9.  From our coproduct type we can define conditional or boolean types along with the all important grammatical
	    construct:

		if_then_else : bool x A x B --> (A | B)

	10. With the ability to now dispatch by type, the following function can be defined:

		dual : (A | (A -->B) x A --> B) --> (A | B)

	    which dispatches to the appropriate transit function if the input is a function object, and dispatches
	    to the appropriate reflex function otherwise. This function is very important in implementing the

		eval

            function for general interpretation later on.

	11. Through a combination of dual . if_then_else function along with ("delayed") function objects, tail recursion
	    becomes possible.

	12. With tail recursion comes the ability to implement the power (list) type. Technically the list type itself can
	    be defined without tail recursion, but the functions commonly associated with this type do require tail recursion.

	13. With the power type comes the copower type, which in C++ is known as "switch", and in other literature is known
	    as "cases" or some variation of it.

	14. This library contextually privileges continuation passing: Builtin template templates are not composable,
	    and parameter packs are not objects (C++ standard). As a consequence, whenever a builtin or a parameter pack
	    is (stand alone) returned from a symbolic function, it is a best practice to adhere to the continuation passing
	    paradigm. This allows for composability while minimizing memoization.

	15. This library privileges the combinatorial paradigm: Minimalist grammatical forms are composed to implement composite
	    grammatical forms. The combinatorial space of such compositions is associated with its given module, and any
	    composite form is only reimplemented if it can be optimized effectively away from its composed minimal forms.

	    In other words: Lazy implementation of grammar while acknowledging the appropriate declaration (extensional)
	    location if and when it is reimplemented as an optimization.

	16. This library privileges the apriori/aposteriori paradigm: Generic functions will exist in contexts in which
	    only given aposteriori (after the fact), otherwise if the context is known apriori (in advance) then the
	    appropriate optimized dispatch function can be unpacked and called manually.


