										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<U_TYPE>>>_add)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<U_TYPE>>>_add<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<U_TYPE>>>_multiply)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<U_TYPE>>>_multiply<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<U_TYPE>>>_subtract)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<U_TYPE>>>_subtract<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<U_TYPE>>>_divide)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<U_TYPE>>>_divide<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<U_TYPE>>>_modulo)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<U_TYPE>>>_modulo<Value1, Value2, Continuation>;
