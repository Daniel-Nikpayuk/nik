struct <<<DIVISION>>>
{
	#include nik_symbolic_typedef(patronum, natural, kernel, builtin, inductor)
	#include nik_symbolic_typedef(patronum, natural, kernel, judgment, <<<DIVISION>>>)

	// is judgment:

		// symbolic:

		template
		<
			typename Exp,
			typename Continuation = ch_s_match_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_is_<<<MODULE>>> = s_is_judgment
		<
			<<<TYPE>>>, Exp, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Exp,
			typename Continuation = ch_a_value,
			typename Image = bool
		>
		static constexpr Image a_is_<<<MODULE>>> = a_is_judgment
		<
			<<<TYPE>>>, Exp, Continuation, Image
		>;

	// is curried judgment:

		// symbolic:

		template
		<
			typename Exp,
			typename Continuation = ch_s_match_to_value,
			typename Kind = bool
		>
		using s_is_curried_<<<MODULE>>> = s_is_curried_judgment
		<
			<<<TYPE>>>, Exp, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Exp,
			typename Continuation = ch_a_value,
			typename Image = bool
		>
		static constexpr Image a_is_curried_<<<MODULE>>> = a_is_curried_judgment
		<
			<<<TYPE>>>, Exp, Continuation, Image
		>;
};
