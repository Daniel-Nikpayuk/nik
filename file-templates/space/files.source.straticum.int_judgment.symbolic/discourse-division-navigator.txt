struct <<<DIVISION>>>
{
	#include nik_symbolic_typedef(patronum, natural, kernel, builtin, inductor)
	#include nik_symbolic_typedef(patronum, natural, kernel, judgment, <<<DIVISION>>>)

	// add:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_add = s_judgment_add
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_add = a_judgment_add
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried add:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>
		>
		using s_curried_<<<MODULE>>>_add = s_curried_judgment_add
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_add = a_curried_judgment_add
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;

	// subtract:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_subtract = s_judgment_subtract
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_subtract = a_judgment_subtract
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried subtract:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>
		>
		using s_curried_<<<MODULE>>>_subtract = s_curried_judgment_subtract
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_subtract = a_curried_judgment_subtract
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;

	// multiply:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_multiply = s_judgment_multiply
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_multiply = a_judgment_multiply
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried multiply:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>
		>
		using s_curried_<<<MODULE>>>_multiply = s_curried_judgment_multiply
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_multiply = a_curried_judgment_multiply
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;

	// divide:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_divide = s_judgment_divide
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_divide = a_judgment_divide
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried divide:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>
		>
		using s_curried_<<<MODULE>>>_divide = s_curried_judgment_divide
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_divide = a_curried_judgment_divide
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;

	// modulo:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_modulo = s_judgment_modulo
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_modulo = a_judgment_modulo
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried modulo:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = <<<TYPE>>>
		>
		using s_curried_<<<MODULE>>>_modulo = s_curried_judgment_modulo
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = <<<TYPE>>>,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_modulo = a_curried_judgment_modulo
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;
};
