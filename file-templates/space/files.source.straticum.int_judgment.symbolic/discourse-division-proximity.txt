struct <<<DIVISION>>>
{
	#include nik_symbolic_typedef(patronum, natural, kernel, builtin, inductor)
	#include nik_symbolic_typedef(patronum, natural, kernel, judgment, <<<DIVISION>>>)

	// less than:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_less_than = s_judgment_less_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_less_than = a_judgment_less_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried less than:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool
		>
		using s_curried_<<<MODULE>>>_less_than = s_curried_judgment_less_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_less_than = a_curried_judgment_less_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;

	// less than or equal:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_less_than_or_equal = s_judgment_less_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_less_than_or_equal = a_judgment_less_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried less than or equal:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool
		>
		using s_curried_<<<MODULE>>>_less_than_or_equal = s_curried_judgment_less_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_less_than_or_equal = a_curried_judgment_less_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;

	// greater than:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_greater_than = s_judgment_greater_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_greater_than = a_judgment_greater_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried greater than:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool
		>
		using s_curried_<<<MODULE>>>_greater_than = s_curried_judgment_greater_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_greater_than = a_curried_judgment_greater_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;

	// greater than or equal:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_greater_than_or_equal = s_judgment_greater_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values,
			typename Image = Kind
		>
		static constexpr Image a_<<<MODULE>>>_greater_than_or_equal = a_judgment_greater_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind, Image
		>;

	// curried greater than or equal:

		// symbolic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_s_values,
			typename Kind = bool
		>
		using s_curried_<<<MODULE>>>_greater_than_or_equal = s_curried_judgment_greater_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind
		>;

		// assemblic:

		template
		<
			typename Value1, typename Value2,
			typename Continuation = ch_a_to_value,
			typename Kind = bool,
			typename Image = Kind
		>
		static constexpr Image a_curried_<<<MODULE>>>_greater_than_or_equal = a_curried_judgment_greater_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, Image
		>;
};
