struct <<<DIVISION>>>
{
	#include nik_symbolic_typedef(patronum, natural, kernel, builtin, inductor)
	#include nik_assemblic_typedef(patronum, natural, kernel, judgment, <<<DIVISION>>>)

	// less than:

		// symbolic:

		template
		<
			<<<TYPE>>> Value1, <<<TYPE>>> Value2,
			typename Continuation = ch_s_match_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_less_than = sf_judgment_less_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

			// is not implemented as it's better to use constexpr functions.

		// procedural:

		static constexpr bool (*p_<<<MODULE>>>_less_than)(<<<TYPE>>>, <<<TYPE>>>) =
			p_judgment_less_than<<<<TYPE>>>>;

	// less than or equal:

		// symbolic:

		template
		<
			<<<TYPE>>> Value1, <<<TYPE>>> Value2,
			typename Continuation = ch_s_match_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_less_than_or_equal = sf_judgment_less_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

			// is not implemented as it's better to use constexpr functions.

		// procedural:

		static constexpr bool (*p_<<<MODULE>>>_less_than_or_equal)(<<<TYPE>>>, <<<TYPE>>>) =
			p_judgment_less_than_or_equal<<<<TYPE>>>>;

	// greater than:

		// symbolic:

		template
		<
			<<<TYPE>>> Value1, <<<TYPE>>> Value2,
			typename Continuation = ch_s_match_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_greater_than = sf_judgment_greater_than
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

			// is not implemented as it's better to use constexpr functions.

		// procedural:

		static constexpr bool (*p_<<<MODULE>>>_greater_than)(<<<TYPE>>>, <<<TYPE>>>) =
			p_judgment_greater_than<<<<TYPE>>>>;

	// greater than or equal:

		// symbolic:

		template
		<
			<<<TYPE>>> Value1, <<<TYPE>>> Value2,
			typename Continuation = ch_s_match_to_value,
			typename Kind = bool,
			template<Kind...> class ListKind = dependent_memoization<Kind>::template pattern_match_values
		>
		using s_<<<MODULE>>>_greater_than_or_equal = sf_judgment_greater_than_or_equal
		<
			<<<TYPE>>>, Value1, Value2, Continuation, Kind, ListKind
		>;

		// assemblic:

			// is not implemented as it's better to use constexpr functions.

		// procedural:

		static constexpr bool (*p_<<<MODULE>>>_greater_than_or_equal)(<<<TYPE>>>, <<<TYPE>>>) =
			p_judgment_greater_than_or_equal<<<<TYPE>>>>;
};
