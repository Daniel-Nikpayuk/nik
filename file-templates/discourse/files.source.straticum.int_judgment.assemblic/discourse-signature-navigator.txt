<<<DEFINE_DEPENDENCIES_TEXT>>>#ifdef safe_name

	#define PREFIX		<<<DIV_SIGNATURE>>>_

#else

	#define PREFIX

#endif

//

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_add)			= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<MODULE>>>_add<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_multiply)			= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<MODULE>>>_multiply<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_subtract)			= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<MODULE>>>_subtract<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_divide)			= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<MODULE>>>_divide<Value1, Value2, Continuation>;

										  template
										  <
											<<<TYPE>>> Value1,
											<<<TYPE>>> Value2,

											typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_symbolic_values
										  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_modulo)			= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_<<<MODULE>>>_modulo<Value1, Value2, Continuation>;

//

	static constexpr <<<TYPE>>> (*nik_safe(PREFIX, p_<<<MODULE>>>_add))(<<<TYPE>>>, <<<TYPE>>>) =
		<<<SIGNATURE>>>::<<<DIVISION>>>::p_<<<MODULE>>>_add;

	static constexpr <<<TYPE>>> (*nik_safe(PREFIX, p_<<<MODULE>>>_multiply))(<<<TYPE>>>, <<<TYPE>>>) =
		<<<SIGNATURE>>>::<<<DIVISION>>>::p_<<<MODULE>>>_multiply;

	static constexpr <<<TYPE>>> (*nik_safe(PREFIX, p_<<<MODULE>>>_subtract))(<<<TYPE>>>, <<<TYPE>>>) =
		<<<SIGNATURE>>>::<<<DIVISION>>>::p_<<<MODULE>>>_subtract;

	static constexpr <<<TYPE>>> (*nik_safe(PREFIX, p_<<<MODULE>>>_divide))(<<<TYPE>>>, <<<TYPE>>>) =
		<<<SIGNATURE>>>::<<<DIVISION>>>::p_<<<MODULE>>>_divide;

	static constexpr <<<TYPE>>> (*nik_safe(PREFIX, p_<<<MODULE>>>_modulo))(<<<TYPE>>>, <<<TYPE>>>) =
		<<<SIGNATURE>>>::<<<DIVISION>>>::p_<<<MODULE>>>_modulo;

//

#undef PREFIX<<<UNDEF_DEPENDENCIES_TEXT>>>
