<<<DEFINE_DEPENDENCIES_TEXT>>>#ifdef safe_name

	#define PREFIX		<<<DIV_SIGNATURE>>>_

#else

	#define PREFIX

#endif

//

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values
											  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_add)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_<<<MODULE>>>_add
											<Value1, Value2, Continuation, Kind, ListKind>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>
											  >
	using nik_safe(PREFIX, s_curried_<<<MODULE>>>_add)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_curried_<<<MODULE>>>_add
											<Value1, Value2, Continuation, Kind>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values
											  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_subtract)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_<<<MODULE>>>_subtract
											<Value1, Value2, Continuation, Kind, ListKind>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>
											  >
	using nik_safe(PREFIX, s_curried_<<<MODULE>>>_subtract)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_curried_<<<MODULE>>>_subtract
											<Value1, Value2, Continuation, Kind>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values
											  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_multiply)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_<<<MODULE>>>_multiply
											<Value1, Value2, Continuation, Kind, ListKind>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>
											  >
	using nik_safe(PREFIX, s_curried_<<<MODULE>>>_multiply)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_curried_<<<MODULE>>>_multiply
											<Value1, Value2, Continuation, Kind>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values
											  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_divide)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_<<<MODULE>>>_divide
											<Value1, Value2, Continuation, Kind, ListKind>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>
											  >
	using nik_safe(PREFIX, s_curried_<<<MODULE>>>_divide)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_curried_<<<MODULE>>>_divide
											<Value1, Value2, Continuation, Kind>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values
											  >
	using nik_safe(PREFIX, s_<<<MODULE>>>_modulo)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_<<<MODULE>>>_modulo
											<Value1, Value2, Continuation, Kind, ListKind>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_s_values,
												typename Kind = <<<TYPE>>>
											  >
	using nik_safe(PREFIX, s_curried_<<<MODULE>>>_modulo)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_curried_<<<MODULE>>>_modulo
											<Value1, Value2, Continuation, Kind>;

//

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values,

												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_<<<MODULE>>>_add)		= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_<<<MODULE>>>_add
											<Value1, Value2, Continuation, Kind, ListKind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,
												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_curried_<<<MODULE>>>_add)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_curried_<<<MODULE>>>_add
											<Value1, Value2, Continuation, Kind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values,

												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_<<<MODULE>>>_subtract)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_<<<MODULE>>>_subtract
											<Value1, Value2, Continuation, Kind, ListKind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,
												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_curried_<<<MODULE>>>_subtract)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_curried_<<<MODULE>>>_subtract
											<Value1, Value2, Continuation, Kind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values,

												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_<<<MODULE>>>_multiply)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_<<<MODULE>>>_multiply
											<Value1, Value2, Continuation, Kind, ListKind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,
												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_curried_<<<MODULE>>>_multiply)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_curried_<<<MODULE>>>_multiply
											<Value1, Value2, Continuation, Kind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values,

												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_<<<MODULE>>>_divide)		= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_<<<MODULE>>>_divide
											<Value1, Value2, Continuation, Kind, ListKind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,
												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_curried_<<<MODULE>>>_divide)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_curried_<<<MODULE>>>_divide
											<Value1, Value2, Continuation, Kind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,

												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values,

												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_<<<MODULE>>>_modulo)		= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_<<<MODULE>>>_modulo
											<Value1, Value2, Continuation, Kind, ListKind, Image>;

											  template
											  <
												typename Value1,
												typename Value2,
												typename Continuation = nik::ch_a_to_value,
												typename Kind = <<<TYPE>>>,
												typename Image = Kind
											  >
	static constexpr Image nik_safe(PREFIX, a_curried_<<<MODULE>>>_modulo)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_curried_<<<MODULE>>>_modulo
											<Value1, Value2, Continuation, Kind, Image>;

//

#undef PREFIX<<<UNDEF_DEPENDENCIES_TEXT>>>
