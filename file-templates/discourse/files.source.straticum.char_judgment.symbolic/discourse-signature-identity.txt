<<<DEFINE_DEPENDENCIES_TEXT>>>#ifdef safe_name

	#define PREFIX		<<<DIV_SIGNATURE>>>_

#else

	#define PREFIX

#endif

//

											  template
											  <
												typename Exp,

												typename Continuation =
												typename pnk_builtin_ss::inductor::
												ch_s_match_to_value,

												typename Kind = bool,

												template<Kind...> class ListKind =
												pnk_builtin_ss::inductor::template
												dependent_memoization<Kind>::template
												pattern_match_values
											  >
	using nik_safe(PREFIX, s_is_<<<MODULE>>>)				= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  s_is_<<<MODULE>>>
												<Exp, Continuation, Kind, ListKind>;

										  template
										  <
										  	typename Exp,

										  	typename Continuation =
											typename pnk_builtin_ss::inductor::
											ch_s_match_to_value,

										  	typename Kind = bool
										  >
	using nik_safe(PREFIX, s_is_curried_<<<MODULE>>>)			= typename <<<SIGNATURE>>>::<<<DIVISION>>>::template
										  s_is_curried_<<<MODULE>>>
											<Exp, Continuation, Kind>;

//

											  template
											  <
												typename Exp,
												typename Continuation = nik::ch_a_value,
												typename Image = bool
											  >
	static constexpr Image nik_safe(PREFIX, a_is_<<<MODULE>>>)		= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_is_<<<MODULE>>>
												<Exp, Continuation, Image>;

											  template
											  <
											  	typename Exp,
											  	typename Continuation = nik::ch_a_value,
											  	typename Image = bool
											  >
	static constexpr Image nik_safe(PREFIX, a_is_curried_<<<MODULE>>>)	= <<<SIGNATURE>>>::<<<DIVISION>>>::template
											  a_is_curried_<<<MODULE>>>
												<Exp, Continuation, Image>;

//

#undef PREFIX<<<UNDEF_DEPENDENCIES_TEXT>>>
