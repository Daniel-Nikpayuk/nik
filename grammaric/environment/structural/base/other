/************************************************************************************************************************
**
** Copyright 2015, 2016, 2017 Daniel Nikpayuk, Inuit Nunangat, The Inuit Nation
**
** This file is part of nik.
**
** nik is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
** as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
**
** nik is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
** of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License along with nik. If not, see
** <http://www.gnu.org/licenses/>.
**
************************************************************************************************************************/

template<typename Variable, typename Constant>
struct binding;

template<typename Variable, typename Type, Type value>
struct binding<Variable, c<Type, value>>
{
	using v = Variable;

	using c = c<Type, value>;
};

template<typename... bindings>
struct frame
{
	using s = module::s<bindings...>;

	using rtn = frame;

	using null = frame<>;

	//

	template<typename expression>
	struct enframe
	{
		template<typename Base> struct coerce;

		template<typename... args>
		struct coerce<module::s<args...>>
		{
			using rtn = frame<args...>;
		};

		using rtn = typename coerce<typename expression::rtn>::rtn;
	};

//		Navigational:

	using car = typename s::car;

	using cdr = enframe<typename s::cdr>;

//		Existential:

	template<typename List>
	using equals = typename s::template equals<List>;

	using empty = typename s::empty; 

	using length = typename s::length;

//		Generational:

	template<typename first>
	using cons = enframe<typename s::template cons<first>>;

	template<typename last>
	using push = enframe<typename s::template push<last>>;

	template<typename List>
	using prepend = enframe<typename s::template prepend<List>>;

	template<typename List>
	using append = enframe<typename s::template append<List>>;

	using sort = enframe<typename functional::template quickSort<s>>;

//		Translational:

	template<typename Parameter, Parameter... args>
	using parameter = enframe<typename s::template parameter<Parameter, args...>>;

	//

	static void print() { functional::template printer<s>::print(); }
};

using null_frame = frame<>;

